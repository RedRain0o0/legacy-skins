import io.github.redrain0o0.legacyskins.buildscript.ModLoader

import static io.github.redrain0o0.legacyskins.buildscript.ModLoader.*
import io.github.redrain0o0.legacyskins.buildscript.ProjectInfo
plugins {
	id 'maven-publish'
}

ProjectInfo info = ProjectInfo.from(project)
String minecraftVersion = info.minecraftVersion()
ModLoader loader = info.loader()

project.ext["loom.platform"] = loader.friendlyName

version = project.mod_version + "+" + loader.friendlyName + "+" + minecraftVersion
group = project.maven_group

apply plugin: 'dev.architectury.loom'
stonecutter.const("fabric", loader == FABRIC)
stonecutter.const("forge", loader == FORGE)
stonecutter.const("neoforge", loader == NEOFORGE)

base {
	archivesName = project.archives_base_name
}

def packageJar = tasks.create("packageJar", Copy.class) {
	into("${rootProject.layout.buildDirectory.get()}/libs/$mod_version")
}

repositories {
	mavenCentral()
	maven {
		name = "tom5454 maven"
		url = "https://raw.githubusercontent.com/tom5454/maven/main"
	}
	maven {
		url "https://maven.isxander.dev/releases"
	}
	if (loader == NEOFORGE) {
		maven {
			url "https://maven.neoforged.net/releases"
		}
	}
	maven {
		url "https://maven.minecraftforge.net/"
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()

	// Fabric API. This is technically optional, but you probably want it anyway.
	compileOnly "com.tom5454.cpm:CustomPlayerModels-API:${project.cpm_api_version}"
	modImplementation "com.tom5454.cpm:CustomPlayerModels-${loader == NEOFORGE ? "" : "${project.cpm_loader}-"}${project.cpm_mc_version}:${project.cpm_runtime_version}"
	modImplementation "maven.modrinth:legacy4j:${project.legacy4j_version}"
	api "dev.isxander:libsdl4j:${project.libsdl4j_version}"
	if (loader.isForgeLike()) {forgeRuntimeLibrary "dev.isxander:libsdl4j:${project.libsdl4j_version}"}

	// Fabric exclusive dependencies:
	if (loader == FABRIC) {
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		implementation include("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")
		testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
		// Save download time by only depending on Fabric API when it's needed, otherwise just depending on a few modules required to compile Legacy Skins. {
		if (stonecutter.current.isActive) {
			modLocalRuntime("net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version")
		} else {
			modLocalRuntime "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version", {
				transitive = false
			}
		}
		for (String module in project.properties.fabric_api_modules.split(",") as String[]) {
			modApi fabricApi.module(module, "$project.properties.fabric_api_version")
		}
		// }
	} else if (loader == NEOFORGE) {
		neoForge "net.neoforged:neoforge:$project.properties.neoforge_version"
	}
}

test {
	useJUnitPlatform()
}

if (loader == FABRIC) {
	fabricApi {
		configureDataGeneration()
	}
} else if (loader == NEOFORGE) {
	loom {
		afterEvaluate {
			runs {
				datagen {
					data()
					programArg "--mod"
					programArg "legacyskins"
					programArg "--output"
					programArg getProject().file("src/main/generated").toPath().toAbsolutePath().toString()
				}
			}
		}
		sourceSets {
			main {
				resources {
					srcDirs += [getProject().file("src/main/generated")]
				}
			}
		}
	}
}

loom {
	runConfigs.all {
		ideConfigGenerated(true) // Run configurations are not created for subprojects by default
		runDir = "../../run" // Use a shared run folder and just create separate worlds
	}
}

processResources {
	def deps = [
			"version": project.version,
	        "minecraft": "~" + project.minecraft_version
	]
	inputs.property "version", project.version
	inputs.property "deps", deps

	filesMatching(["fabric.mod.json", "META-INF/neoforge.mods.toml"]) {
		expand "deps": deps
	}

	if (loader != NEOFORGE) exclude "META-INF/neoforge.mods.toml"
	if (loader != FABRIC) exclude "fabric.mod.json"
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	withJavadocJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

afterEvaluate {
	packageJar.dependsOn(remapJar)
	packageJar.from(remapJar.archiveFile)
	build.finalizedBy(packageJar)
}